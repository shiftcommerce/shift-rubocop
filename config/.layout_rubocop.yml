# "Layout::AccessModifierIndentation"
#
# Modifiers should be indented as deep as method definitions,
# or as deep as the class/module keyword, depending on configuration.

Layout/AccessModifierIndentation:
  Enabled: true

# Layout::AlignArray
#
# Check if elements of a multi-line array literal are aligned.

Layout/AlignArray:
  Enabled: false

# Layout::AlignHash
#
# Check if the keys, separators, and values of a multi-line hash literal are aligned.

Layout/AlignHash:
  Enabled: false

# Layout::AlignParameters
#
# Check if parameters on a multi-line method call or definition are aligned.

Layout/AlignParameters:
  Enabled: false

# Layout::BlockAlignment
#
# Checks whether the end keywords are aligned properly for do end blocks.
#
# The value `start_of_block` means that the `end` should be aligned with line
# where the `do` keyword appears.
#
# The value `start_of_line` means it should be aligned with the whole
# expression's starting line.
#
# The value `either` means both are allowed.

Layout/BlockAlignment:
  EnforcedStyleAlignWith: either


# Layout::ConditionPosition
#
# Checks for conditions that are not on the same line as if/while/until.
#
# bad:
#
#   if
#     some_condition
#     do_something
#   end
#
# good:
#
#   if some_condition
#     do_something
#   end
#
  
Layout/ConditionPosition:
  Enabled: false

# Layout::ClosingParenthesesIndentation
#
# Checks the indentation of hanging closing parenthesese in method calls, method definitions and
# grouped expressions. A hanging closing parentheses means ')' preceded by a line break
#
# bad:
#
#  def func(
#    x,
#    y
#    )
#
# good:
#
#  a = b * (x +
#           y
#          )

Layout/ClosingParenthesisIndentation:
  Enabled: true

# Layout::CommentIndentation
#
# Checks the indentation of comments.

Layout/CommentIndentation:
  Enabled: false

# Layput::DefEndAlignment
#
# Checks whether the end keywords of method definitions are aligned properly

Layout/DefEndAlignment:
  EnforcedStyleAlignWith: start_of_line
  AutoCorrect: true

# Layout::DotPosition
#
# Checks the '.' position in multi-line method calls

Layout/DotPosition:
  EnforcedStyle: trailing

# Layout::ElseAlignment
#
# Checks for alignment of `else` keywords

Layout/ElseAlignment:
  Enabled: true

# Layout::EndAlignment
#
# Checks whether the end keywords are aligned properly

Layout/EndAlignment:
  EnforcedStyleAlignWith: keyword
  AutoCorrect: true

# Layout::EndOfLine
#
# Checks for Windows-style line endings in source code.

Layout/EndOfLine:
  Enabled: false

# Layout::FirstArrayElementLineBreak
#
# Checks for a line break before the first element in a multi-line array.
#
# bad:
#
#  [ :a,
#    :b]
#
# good:
#
#  [
#    :a,
#    :b]

Layout/FirstArrayElementLineBreak:
  Enabled: false

# Layout::FirstHashElementLineBreak
#
# Checks for a line break before the first element in a multi-line hash.
#
# bad:
#
#  { a: 1,
#    b: 2}
#
# good:
#
#  {
#    a: 1,
#    b: 2 }

Layout/FirstHashElementLineBreak:
  Enabled: false

# Layout::FirstMethodArgumentLineBreak
#
# Checks for a line break before the first argument in a multi-line method call.
#
# bad:
#
#  method(foo, bar,
#    baz)
#
# good:
#
#  method(
#    foo, bar,
#    baz)
#
# ignored:
#
#  method foo, bar,
#    baz

Layout/FirstMethodArgumentLineBreak:
  Enabled: true

# Layout::FirstMethodParameterLineBreak
#
# Checks for a line break before the first parameter in a multi-line method parameter definition
#
# bad:
#
#  def method(foo, bar,
#      baz)
#    do_something
#  end
#
# good:
#
#  def method(
#      foo, bar,
#      baz)
#    do_something
#  end
#
# ignored:
#
#  def method foo,
#      bar
#    do_something
#  end

Layout/FirstMethodParameterLineBreak:
  Enabled: true

# Layout::ExtraSpacing
#
# Checks for extra/unnecessary whitespace

Layout/ExtraSpacing:
  # When true, allows most uses of extra spacing if the intent is to align
  # things with the previous or next line, not counting empty lines or comment
  # lines.
  AllowForAlignment: true
  # When true, forces the alignment of `=` in assignments on consecutive lines.
  ForceEqualSignAlignment: false

# Layout::IndentAssignment
#
# Checks the indentation of the first line of the right-hand-side of a multi-line assignment.
#
# bad:
#
#  value =
#  if foo
#    'bar'
#  end
#
# good:
#
#  value =
#    if foo
#    'bar'
#  end

Layout/IndentAssignment:
  Enabled: false

# Layout::IndentationConsistency
#
# Checks for inconsistent indentation
#
# bad:
#
#   def test
#     puts "world"
#       puts "here"
#   end

Layout/IndentationConsistency:
  EnforcedStyle: normal

# Layout::IndentationWidth
#
# Checks for indentation that does't use two spaces
#
# bad:
#
#   def test
#    puts "world"
#   end

Layout/IndentationWidth:
  Width: 2
  IgnoredPatterns: []

# Layout::InitialIndentation:
#
# Checks for indentation of the first non-blank non-comment line in a file.

Layout/InitialIndentation:
  Enabled: true

# Layout::BlockEndNewline
#
# Checks whether the end statement of a do..end block is on its own line.
#
# bad:
#
#   apple do |piece|
#     eat(piece) end
#
# good:
#
#   apple do |piece|
#     eat(piece)
#   end

Layout/BlockEndNewline:
  Enabled: true

# Layout::EmptyLineBetweenDefs
#
# Checks whether method definitions are separated by empty lines

Layout/EmptyLineBetweenDefs:
  Enabled: true

# Layout::EmptyLines
#
# Checks for two or more consecutive blank lines

Layout/EmptyLines:
  Enabled: true

# StLayoutyle::EmptyLinesAroundAccessModifier
#
# Access modifiers should be surrounded by blank spaces.

Layout/EmptyLinesAroundAccessModifier:
  Enabled: false

# Layout::EmptyLinesAroundBlockBody
#
# Checks if empty lines around the bodies of blocks match the configuration.
#
# bad:
#
#  foo do |bar|
#    ...
#  end
#
# good:
#
#  foo do |bar|
#
#    ....
#
#  end
#
# ( This helps in readability of code )

Layout/EmptyLinesAroundBlockBody:
  Enabled: false

# Layout::EmptyLinesAroundClassBody
#
# Checks if empty lines around the bodies of classes match the configuration

Layout/EmptyLinesAroundClassBody:
  Enabled: false

# Layout::EmptyLinesAroundMethodBody
#
# Checks if empty lines exist around the bodies of methods.

Layout/EmptyLinesAroundMethodBody:
  Enabled: false

# Layout::EmptyLinesAroundModuleBody
#
# Checks if empty lines around the bodies of modules match the configuration

Layout/EmptyLinesAroundModuleBody:
  Enabled: false

# Layout::LeadingCommentSpace
#
# Checks whether comments have a leading space after the '#'
# Note: Leading space is not required for RDoc special syntax, like #++, #-, #:nodoc, etc.

Layout/LeadingCommentSpace:
  Enabled: true

# Layout::RescueEnsureAlignment
#
# Checks whether the rescue and ensure keywords are aligned properly
#
# bad:
#  begin
#    something
#    rescue
#    puts 'error'
#  end
#
# good:
#
#  begin
#    something
#  rescue
#    puts 'error'
#  end

Layout/RescueEnsureAlignment:
  Enabled: true

# Layout::SpaceBeforeSemicolon
#
# Checks for semicolon (;) preceded by space.

Layout/SpaceBeforeSemicolon:
  Enabled: true

# Layout::CaseIndentation
#
# Checks how the 'when's of a case expression are indented in relation to its
# 'case' or 'end' keyword
#
# bad:
#
#  case foo
#    when *condition
#     bar
#   when baz
#     foobar
#  end
#
# good:
#
#  case foo
#  when baz
#    foobar
#  when *condition
#    bar
#  end

Layout/CaseIndentation:
  Enabled: false

# Layout::IndentFirstArgument
#
# Checks the indentation of the first parameter in a method call.
# ( This cop checks only for first parameter indentation )
# bad:
#
#  some_method(
#  first_param,
#  second_param)
#
# good:
#
#  some_method(
#    first_param,
#  second_param)

Layout/IndentFirstArgument:
  EnforcedStyle: special_for_inner_method_call_in_parentheses

# Layout::IndentFirstArrayElement
#
# Checks for indentation of the first element in the array literal where
# the opening bracket and the first elements are on separate lines.
# ( Array literals shall have their first element indented one step (2 spaces)
#   more than the start of the line where the opening bracket is )

Layout/IndentFirstArrayElement:
  Enabled: false

# Layout::IndentFirstHashElement
#
# Same as the Indent Array but in case of hash

Layout/IndentFirstHashElement:
  Enabled: false

# Layout::MultilineArrayBraceLayout
#
# Checks that the closing brace in an array literal is either on the
# same line as the last array element, or a new line.
#
# symmetrical: closing brace is positioned in same way as opening brace

Layout/MultilineArrayBraceLayout:
  EnforcedStyle: symmetrical

# Layout::MultilineAssignmentLayout
#
# Checks whether the multiline assignments have a new line after
# the assignment operator
#
# bad: (with EnforcedStyle set to new_line)
#
#  foo = if expression
#    'bar'
#  end
#
# good: (with EnforcedStyle set to same_line)
#
#  foo = if expression
#    'bar'
#  end

Layout/MultilineAssignmentLayout:
  EnforcedStyle: same_line

# Layout::MultilineBlockLayout
#
# Checks whether the multiline do end blocks have a newline after the start of the block.
# Additionally, it checks whether the block arguments, if any, are on the same line as the start of the block.
#
# bad:
#
#  blah do
#    |i| foo(i)
#    bar(i)
#  end
#
# good:
#
#  blah do |i|
#    foo(i)
#    bar(i)
#  end

Layout/MultilineBlockLayout:
  Enabled: true

# Layout::MultilineHashBraceLayout
#
# Checks that the closing brace in a hash literal is either on the
# same line as the last hash element, or a new line
#
# Symmetrical:
#   { a: 1,
#     b: 2 }
#
#   {
#     a: 1,
#     b: 2
#   }

Layout/MultilineHashBraceLayout:
  EnforcedStyle: symmetrical

# Layout::MultilineMethodCallBraceLayout
#
# Checks that the closing brace in a method call is either on the
# same line as the last method argument, or a new line

Layout/MultilineMethodCallBraceLayout:
  EnforcedStyle: symmetrical

# Layout::MultilineMethodCallIndentation
#
# Checks the indentation of the method name part in method calls
# that span more than one line.
#
# bad
#  while a
#  .b
#    something
#  end
#
# good:
#
#  while a
#        .b
#    something
#  end

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: aligned

# Layout::MultilineMethodDefinitionBraceLayout
#
# Checks that the closing brace in a method definition is either on the
# same line as the last method parameter, or a new line

Layout/MultilineMethodDefinitionBraceLayout:
  EnforcedStyle: symmetrical

# Layout::MultilineOperationIndentation
#
# Checks the indentation of the right hand side operand in the binary operations that span
# more than one line.
#
# bad:
#
#  if a +
#  b
#    something
#  end

Layout/MultilineOperationIndentation:
  EnforcedStyle: aligned

# Layout/SpaceAfterColon
#
# Checks for colon(:) not followed by some kind of space.
Layout/SpaceAfterColon:
  Enabled: true

# Layout/SpaceAfterComma
#
# Checks for comma(,) not followed by some kind of space.
Layout/SpaceAfterComma:
  Enabled: true


# Layout::SpaceAfterMethodName
#
# Checks for space between a method name and a left parenthesis in defs
#
# bad:
#
#  def func (x) .. end
#
# good:
#
#  def func(x) ... end
#
Layout/SpaceAfterMethodName:
  Enabled: true

# Layout::SpaceAfterNot
#
# Checks for space after '!'
#
# bad:  ! something
#
# good: !something
#
Layout/SpaceAfterNot:
  Enabled: true

# Layout::SpaceAfterSemicolon
#
# Checks for semicolon not followed by somekind of space
Layout/SpaceAfterSemicolon:
  Enabled: true

# Layout::SpaceAroundBlockParameters
#
# Checks that spacing inside and after block parameters pipes
#
# bad:  {}.each { | x, y | puts x }
#
# good: {}.each { |x,y| puts x }

Layout/SpaceAroundBlockParameters:
  Enabled: true

# Layout::SpaceAroundEqualsInParameterDefault
#
# Checks that the equals signs in parameter default assignments have surrounding space

Layout/SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: space

# Layout::SpaceAroundKeyword
#
# Checks the spacing around the keywords.
#
# bad:
#
#   while(something)
#   end
#
# good:
#
#   while (something)
#   end

Layout/SpaceAroundKeyword:
  Enabled: true

# Layout::SpaceAroundOperators
#
# Checks that operators have space around them,
# except for ** which should not have surrounding space.
#
# bad:  x+y
#
# good: x + y
#
Layout/SpaceAroundOperators:
  Enabled: true

# Layout::SpaceBeforeBlockBraces
#
# Checks that block braces have/dont have space before the opening brace depending on configuration
Layout/SpaceBeforeBlockBraces:
  Enabled: false

# Layout::SpaceBeforeComma
#
# Checks for comma (,) preceded by space

Layout/SpaceBeforeComma:
  Enabled: true

# Layout::SpaceBeforeComment
#
# Checks for missing space between a token and comment on the same line.

Layout/SpaceBeforeComment:
  Enabled: false

# Layout::SpaceBeforeFirstArg
#
# Checks that exactly one space is used between a method name and
# the first argument for method calls without parentheses
#
# bad:
#
#   something   x
#   something     x, y

Layout/SpaceBeforeFirstArg:
  AllowForAlignment: true

# Layout::SpaceInLambdaLiteral
#
# Checks for spaces between -> and opening parameter brace in lambda literals
#
# bad:  a = ->(x,y) { x + y }
#
# good: a = -> (x,y) { x + y }

Layout/SpaceInLambdaLiteral:
  EnforcedStyle: require_space

# Layout::SpaceInsideArrayPercentLiteral
#
# Checks for unnecessary additional spaces inside array percent literals (i.e. %i/%w).
#
# bad:  %w(foo  bar  baz)
#
# good: %w(foo bar baz)

Layout/SpaceInsideArrayPercentLiteral:
  Enabled: true

# Layout::SpaceInsideBlockBraces
#
# Checks that block braces have or don't have surrounding space inside them on configuration
Layout/SpaceInsideBlockBraces:
  Enabled: false

# Layout::SpaceInsideHashLiteralBraces
#
# Checks that braces used for hash literals have or
# don't have surrounding space depending on configuration.
Layout/SpaceInsideHashLiteralBraces:
  Enabled: false

# Layout::SpacsInsideParens
#
# Checks for spaces inside ordinary round parenthesis
Layout/SpaceInsideParens:
  Enabled: false

# Layout::SpaceInsidePercentLiteralDelimiters
#
# Checks for unnecessary additional spaces inside the delimiters of %i,%w, %X literals.
#
# bad:  %x( ls -l )

Layout/SpaceInsidePercentLiteralDelimiters:
  Enabled: true

# Layout::SpaceInsideRangeLiteral
#
# Checks for spaces inside range literals
#
# bad:  1 .. 3
#
# good: 1..3

Layout/SpaceInsideRangeLiteral:
  Enabled: true

# Layout::SpaceInsideStringInterpolation
#
# Checks for whitespace withing string interpolations.
#
# bad: "#{no_space}"
#
# good: "#{ space }"

Layout/SpaceInsideStringInterpolation:
  EnforcedStyle: space

# Layout::Tab
#
# Checks for tabs inside the source code
Layout/Tab:
  Enabled: false

# Layout::TrailingBlankLines
#
# Checks for trailing blank lines
Layout/TrailingBlankLines:
  Enabled: true

# Layout::TrailingWhitespace
#
# Checks for trailing whitespace in the source code
Layout/TrailingWhitespace:
  Enabled: false