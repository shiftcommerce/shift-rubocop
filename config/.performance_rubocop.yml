# Performance::CaseWhenSplat
#
# Place `when` conditions that use splat at the end of the list of `when` branches.
#
# bad:
#
#  case foo
#  when *condition
#    bar
#  when baz
#   foobar
#  end
#
# good:
#
#  case foo
#  when baz
#    foobar
#  when *condition
#    bar
#  end

Performance/CaseWhenSplat:
  Enabled: true

# Performance::Casecmp
#
# Identifies places where a case-insensitive string comparison can better be implemented
# using `casecmp`
#
# bad:  str.downcase == 'abc'
#
# good: str.casecmp('abc').zero?

Performance/Casecmp:
  Enabled: true

# Performance::CompareWithBlock
#
# Identifies place where `sort{ |a, b| a.foo <=> b.foo }` can be replaced by `sort_by(&:foo)`.
# This cop also checks `max` and `min` methods.
#
# bad:    array.sort { |a, b| a.foo <=> b.foo }
#
# good:   array.sort_by(&:foo)

Performance/CompareWithBlock:
  Enabled: true

# Performance::Count
#
# Identifies usages of `count` on an `Enumerable` that follow calls to `select` or `reject`.
# Querying logic can instead be passed to the `count` call.
#
# Example:
#   Model.where(id: [1, 2, 3].select { |m| m.method == true }.size
#   becomes ->
#   Model.where(id: [1, 2, 3].to_a.count { |m| m.method == true }

Performance/Count:
  Enabled: true

# Performance::Detect
#
# Identify usages of `select.first`, `select.last`, `find_all.first` and `find_all.last` and
# change them to use `detect` instead
# `ActiveRecord` compatibility: `ActiveRecord` does not implement a `detect` method and `find`
# has its own meaning
#
# bad:
#
#   [].select { |item| true }.first
#   [].find_all { |item| true ).last
#
# good:
#
#   [].detect { |item| true }
#   [].reverse.detect { |item| true }

Performance/Detect:
  Enabled: true

# Performance::DoubleStartEndWith
#
# Checks for double `#start_with?` or `#end_with?` calls separated by `||`.
#
# bad:  str.start_with?("a") || str.start_with?(Some::CONST)
#
# good: str.start_with?("a", Some::CONST)

Performance/DoubleStartEndWith:
  Enabled: true

# Performance::EndWith
#
# Identifies unnecessary use of a regex where `String#end_with?` would suffice
#
# bad:
#
#  'abc' =~ /bc\Z/
#  'abc'.match(/bc\Z/)
#
# good:
#
#  'abc' =~ /ab/
#  'abc' =~ /\w*\Z/

Performance::EndWith:
  Enabled: true

# Performance::FixedSize
#
# Do not compute the size of statically sized objects.

Performance::FixedSize:
  Enabled: true

# Lint::FlatMap
#
# Used of identify usages of flatten with map and collect
#
# bad:
#
#  [1, 2, 3, 4].map { |e| [e, e] }.flatten(1)
#  [1, 2, 3, 4].collect { |e| [e, e] }.flatten(1)
#
# good:
#
#  [1, 2, 3, 4].flat_map { |e| [e, e] }
#  [1, 2, 3, 4].map { |e| [e, e] }.flatten
#  [1, 2, 3, 4].collect { |e| [e, e] }.flatten

Performance/FlatMap:
  Enabled: true

# Performance::HashEachMethods
#
# Checks for uses of `each_key` and `each_value` Hash methods.
#
# bad:
#
#  hash.keys.each { |k| p k }
#  hash.values.each { |v| p v }
#
# good:
#
#  hash.each_key { |k| p k }
#  hash.each_value { |v| p v }

Performance/HashEachMethods:
  Enabled: true

# Performance::LstripRstrip
#
# Identifies places where `lstrip.rstrip` can be replaced by `strip`
#
# bad:
#
#  'abc'.lstrip.rstrip
#  'abc'.rstrip.lstrip
#
# good:
#
#   'abc'.strip

Performance/LstripRstrip:
  Enabled: true

# Performance::RangeInclude
#
# Identifies uses of `Range#include?`, which iterates over each item in a `Range`
# to see if a specified item is there. `Range#cover?` simply compares the target item
# with the beginning and end points of the `Range`.
#
# Example: ('a'..'z').cover?('yellow')

Performance/RangeInclude:
  Enabled: true

# Performance::RedundantBlockCall
#
# Identifies the use of a `&block` parameter and `block.call` where `yield` would do just as well.
#
# bad:
#
#  def method(&block)
#    block.call
#  end
#
# good:
#
#  def method
#    yield
#  end

Performance/RedundantBlockCall:
  Enabled: true

# Performance::RedundantMatch
#
# Identifies use of `Regexp#match` or `String#match` in a context where the integral return
# value of `=~` would do just well
#
# bad:
#
#  do_something if str.match(/regex/)
#  while regex.match('str')
#    do_something
#  end
#
# good:
#
#  method(str.match(/regex/)
#  return regex.match('str')

Performance/RedundantMatch:
  Enabled: true

# Performance::RedundantMerge
#
# Identifies places where `Hash#merge!` can be replaced by `Hash#[]=`.
#
# Examples:
#
#  hash.merge!(a: 1)
#  hash.merge!({key: 'value'})
#  hash.merge1({ :a => 1, :b=> 2})

Performance/RedundantMerge:
  Enabled: false

# Performance::RedundantSortBy
#
# Identifies places where `sort_by{ ... }` can be replaced by `sort`.
#
# bad:
#
#  array.sort_by { |x| x }
#  array.sort_by do |var|
#    var
#  end
#
# good:
#
#  array.sort

Performance/RedundantSortBy:
  Enabled: true

# Performance::ReverseEach
#
# Identify usages of `reverse.each` and change them to use `reverse_each` instead.
#
# bad:   [].reverse.each
#
# good:  [].reverse_each

Performance/ReverseEach:
  Enabled: true

# Performance::Sample
#
# Identify usages of `shuffle.first`, `shuffle.last` and `shuffle[]` and change them to
# use `sample` instead
#
# bad:   [1, 2, 3].shuffle.first
#
# good:  [1, 2, 3].sample

Performance/Sample:
  Enabled: true

# Performance::Size
#
# Identify usages of `count` on an `Array` and `Hash` and change them to `size`.
#
# bad:    [1, 2, 3].count
#
# good:   [1, 2, 3].size

Performance/Size:
  Enabled: true

# Performance::StartWith
#
# Identifies unnecessary use of a regex where `String#start_with?` would suffice
#
# bad:  'abc' =~ /\Aab/
#
# good: 'abc' =~ /ab/

Performance/StartWith:
  Enabled: true

# Performance::StringReplacement
#
# Identifies places where `gsub` can be replaced by `tr` or `delete`
#
# bad:  'abc'.gsub('b', 'd')
#
# good: 'abc'.tr('b', 'd')

Performance/StringReplacement:
  Enabled: true

# Performance::TimesMap
#
# Checks for .times.map calls. In most cases this can be replaced with an explicit array creation.
#
# bad:
#
#  9.times.map do |i|
#    i.to_s
#  end
#
# good:
#
#  Array.new(9) do |i|
#    i.to_s
#  end

Performance/TimesMap:
  Enabled: true